#!/bin/bash
# macc
# CHANGE MAC ADDRESSES OF CURRENT INTERFACES


#     Generate a valid random MAC address as $RANDMAC
makerand() {
   unset RANDMAC
   APIECES=( 0 4 8 c d 2 3 6 7 a b e f 1 5 9 )
   for i in $(seq 1 12); do
      RANDMAC+="${APIECES[$(shuf -i 0-15 -n 1)]}"
   done
#     Change 2nd digit to [048c] and add semicolons 
   RANDMAC=$(echo $RANDMAC | sed "s/./${APIECES[$(shuf -i 0-3 -n 1)]}/2" | sed -E 's/..\B/&:/g')
   echo $RANDMAC
}


#######################################
#     Set array variable to a list of interfaces excluding the loopback device
setvar() {
   IFLIST=($(ip -br a | grep -v 127.0.0.1 | cut -d ' ' -f 1))
   OLDMACS=($(ip -br link | grep -v LOOPBACK | sed -E 's/\s+/\t/g' | cut -f 3))
   IPLIST=($(ip -br a | grep -v 127.0.0.1 | sed -E 's/\s+/\t/g' | cut -f 3 | sed -E 's/\/.*//g'))
   QTYLIST=$(ip -br a | grep -v 127.0.0.1 | wc -l)
}
setvar


setarray() {
   FLAG=0
#     Change the mac addresses
   for i in $(seq 0 $(($QTYLIST-1))); do
      sudo ip link set ${IFLIST[$i]} down >/dev/null
         if [ $? -ne 0 ]; then
            echo "Error on set link down for ${IFLIST[$i]}" && FLAG=1
         fi
      sudo ip link set ${IFLIST[$i]} address $(makerand) >/dev/null
         if [ $? -ne 0 ]; then
            echo "Error changing hardware address for ${IFLIST[$i]}" && FLAG=1
         fi
      sudo ip link set ${IFLIST[$i]} up >/dev/null
         if [ $? -ne 0 ]; then
            echo "Error on set link up for ${IFLIST[$i]}" && FLAG=1
         fi
   done
   
#     Get NEW mac addresses and store in array
   NEWMACS=($(ip -br link | grep -v LOOPBACK | sed -E 's/\s+/\t/g' | cut -f 3))
#     Put it altogether in one variable   
   for i in $(seq 0 $(($QTYLIST-1))); do
      IFARRAY[$i]=$(echo ${IFLIST[$i]} ${IPLIST[$i]} ${OLDMACS[$i]} ${NEWMACS[$i]})
   done
}
setarray

#  add spacer for visuals if there was an error previously
if [ $FLAG -ne 0 ]; then echo; fi
#     enumerate results
enumerateresults() {
#     Print column headers
   echo "INTERFACE IP-ADDRESS OLD-MAC-ADDR NEW-MAC-ADDR"
   for i in $(seq 0 $(($QTYLIST-1))); do 
      echo ${IFARRAY[$i]}
   done
}

#     print results
enumerateresults | column -t

#######################################
# FOR DEVELOPMENT
sixbysix() {  
   COUNT=-1
   APIECES=( 0 1 2 3 4 5 6 7 8 9 a b c d e f )
   for i in $(seq 0 15); do
      for j in $(seq 0 15); do
         ((COUNT++))
         STRING[$COUNT]="${APIECES[i]}${APIECES[j]}"
       done
   done
}

converit() {
   for i in $(seq 0 255); do
      BIN=$(echo "obase=2; ibase=16; ${STRING[$i]^^}" | bc)
         for j in $(seq 0 $((8-$(echo $BIN | wc -c)))); do
            echo -n 0
         done
      echo $BIN ${STRING[$i]} 
   done

}  

checkit() {
cat hexconversions | while read digit; do
   if [ $(echo $digit | cut -c 7) -eq 1 ]; then
      echo $digit 
   else
      echo $digit valid
   fi
done
}



