#!/bin/bash
# m5
# syntax: m5 string_to_hash_with_no_spaces number_of_iterations
# example: m5 password 500
# output: 76b99d8321c6cb909e45761d4ba7596a
#
# This script works as a 'key stretcher'
# Input your weak but memorable password and hash it thousands of times.
# What you get is a pseudo-random hex value (md5 hash) of your weak password, which, when used correctly,
#    will be a stronger key.
#
# md5 hashes have been calculated for MANY values.  Still.. use strong initial inputs and MANY iterations
#    you have been warned!
#
# Remember to add a space before "m5" so it does not save to bash-history
# OR edit this script to be interactive so your direct inputs are not recorded

unhashed="$1"
originput="$1"
loops="$2"
. ifexists gcol

if [ "$2" ]; then
   errck=pass
else
   echo Error... include string then number of iterations && exit 1
fi

if [ "$3" ]; then
   echo "Error... this script does not accept spaces in the input at this time." && exit 1
   errck=fail
else
   errck=pass
fi


echo $last_command
exit
linuxhash() {
   starttime=$(date +%s)
   while read n; do
      newhash=$(echo -n "$unhashed" | md5sum | cut -d ' ' -f 1)
      unhashed=$newhash
   done <<< $(seq $loops)
   stoptime=$(date +%s)
}

darwinhash() {
   starttime=$(date +%s)
   while read n; do
      newhash=$(echo -n "$unhashed" | md5 | cut -d ' ' -f 1)
      unhashed=$newhash
   done <<< $(seq $loops)
   stoptime=$(date +%s)
}

platformtype=$(uname -s)
case $platformtype in
      Linux)
            linuxhash
            ;;
      Darwin)
            darwinhash
            ;;
      *)
            linuxhash
            ;;
esac

. gcol red
echo -n "$loops " 
. gcol blue
echo -n "iterations of "
. gcol red
echo -n "$originput "
. gcol blue
echo "is"
. gcol yellow
echo "$newhash"
. gcol blue
timelen=$(( $stoptime - $starttime ))
if [ ${timelen} == 1 ]; then
   timeunit='second'
else
   timeunit='seconds'
fi
echo '('Computed in ${timelen} ${timeunit}')'
. gcol white
